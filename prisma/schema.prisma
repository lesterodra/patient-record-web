// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model PatientInformation {
  id                       Int             @id @default(autoincrement())
  patientNo                String?         @unique
  firstName                String?
  lastName                 String?
  middleName               String?
  philHealthNo             String?
  height                   String?
  weight                   String?
  birthDate                String?
  address                  String?
  gender                   String?
  nationality              String?
  civilStatus              String?
  contactNo                String?
  knownAllergies           Json?
  personalMedicalHistories Json?
  previousSurgeries        Json?
  appointmentType          String?
  dilateType               String?
  sourceOfReferral         String?
  patientRecords           PatientRecord[]
  createdAt                DateTime        @default(now())
  updatedAt                DateTime?       @updatedAt

  @@map("patient_informations")
}

model PatientRecord {
  id                    Int                 @id @default(autoincrement())
  recordNo              String?             @unique
  reasonForVisit        Json?
  visitType             String?
  previousMedicines     String?             @db.Text
  autoRefractionOD      String?
  autoRefractionOs      String?
  appointmentTime       String?
  intraOcularPressureOD String?
  intraOcularPressureOS String?
  medicalDoctor         String?
  patientInformation    PatientInformation? @relation(fields: [patientInformationId], references: [id], onDelete: Cascade)
  patientInformationId  Int
  refractionOd          String?
  refractionOdNegative  String?
  refractionOdX         String?
  refractionOs          String?
  refractionOsNegative  String?
  refractionOsX         String?
  refractionAdd         String?
  refractionPd          String?
  visualAcuities        VisualAcuity[]
  drawings              Drawing[]
  createdAt             DateTime            @default(now())
  updatedAt             DateTime?           @updatedAt

  @@map("patient_records")
}

model VisualAcuity {
  id              Int           @id @default(autoincrement())
  eyeType         String
  sc              String?
  ph              String?
  cc              String?
  ncc             String?
  j               String?
  patientRecord   PatientRecord @relation(fields: [patientRecordId], references: [id], onDelete: Cascade)
  patientRecordId Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime?     @updatedAt

  @@map("visual_acuities")
}

model Drawing {
  id              Int           @id @default(autoincrement())
  patientRecord   PatientRecord @relation(fields: [patientRecordId], references: [id], onDelete: Cascade)
  data            String?       @db.Text
  patientRecordId Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime?     @updatedAt

  @@map("drawings")
}

model Department {
  id        Int       @id @default(autoincrement())
  name      String
  users     User[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("departments")
}

model User {
  id           Int        @id @default(autoincrement())
  username     String?    @unique
  password     String?
  email        String?    @unique
  firstName    String?
  lastName     String?
  middleName   String?
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt

  @@map("users")
}
