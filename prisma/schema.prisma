// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model PatientInformation {
  id                            Int             @id @default(autoincrement())
  patientNo                     String?         @unique
  firstName                     String?
  lastName                      String?
  middleName                    String?
  philHealthNo                  String?
  height                        String?
  weight                        String?
  birthDate                     String?
  address                       String?
  province                      String?
  municipality                  String?
  barangay                      String?
  gender                        String?
  nationality                   String?
  civilStatus                   String?
  contactNo                     String?
  knownAllergies                Json?
  knownAllergiesNotes           String?         @db.Text
  personalMedicalHistories      Json?
  personalMedicalHistoriesNotes String?         @db.Text
  previousSurgeries             Json?
  previousSurgeriesNotes        String?         @db.Text
  appointmentType               String?
  dilateType                    String?
  sourceOfReferral              String?
  sourceOfReferralNotes         String?         @db.Text
  patientRecords                PatientRecord[]
  createdAt                     DateTime        @default(now())
  updatedAt                     DateTime?       @updatedAt

  @@map("patient_informations")
}

model PatientRecord {
  id                          Int                 @id @default(autoincrement())
  recordNo                    String?             @unique
  reasonForVisit              Json?
  surgeries                   Json?
  surgeryNotes                String?
  reasonForVisitNotes         String?             @db.Text
  visitType                   String?
  dilateType                  String?
  previousMedicines           String?             @db.Text
  autoRefractionOD            String?
  autoRefractionOs            String?
  appointmentTime             String?
  intraOcularPressureOD       String?
  intraOcularPressureOS       String?
  medicalDoctor               String?
  medicalDoctorUserId         Int?
  medicalDoctorUser           User?               @relation(fields: [medicalDoctorUserId], references: [id])
  patientInformation          PatientInformation? @relation(fields: [patientInformationId], references: [id])
  patientInformationId        Int
  refractionOd                String?
  refractionOdNegative        String?
  refractionOdX               String?
  refractionOs                String?
  refractionOsNegative        String?
  refractionOsX               String?
  refractionAdd               String?
  refractionPd                String?
  status                      String?
  followUpDate                String?
  autoRefractionByUser        User?               @relation(name: "autoRefractionByUser", fields: [autoRefractionByUserId], references: [id])
  autoRefractionByUserId      Int?
  visualAcuityByUser          User?               @relation(name: "visualAcuityByUser", fields: [visualAcuityByUserId], references: [id])
  visualAcuityByUserId        Int?
  refractionByUser            User?               @relation(name: "refractionByUser", fields: [refractionByUserId], references: [id])
  refractionByUserId          Int?
  intraOcularPressureByUser   User?               @relation(name: "intraOcularPressureByUser", fields: [intraOcularPressureByUserId], references: [id])
  intraOcularPressureByUserId Int?
  visualAcuities              VisualAcuity[]
  drawings                    Drawing[]
  createdAt                   DateTime            @default(now())
  updatedAt                   DateTime?           @updatedAt
  attachments                 Attachment[]
  paymentType                 String?
  paymentNotes                String?             @db.Text
  diagnosisNotes              String?             @db.Text

  @@map("patient_records")
}

model VisualAcuity {
  id              Int           @id @default(autoincrement())
  eyeType         String
  sc              String?
  ph              String?
  cc              String?
  ncc             String?
  j               String?
  patientRecord   PatientRecord @relation(fields: [patientRecordId], references: [id], onDelete: Cascade)
  patientRecordId Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime?     @updatedAt

  @@map("visual_acuities")
}

model Attachment {
  id              Int           @id @default(autoincrement())
  url             String
  patientRecord   PatientRecord @relation(fields: [patientRecordId], references: [id], onDelete: Cascade)
  patientRecordId Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime?     @updatedAt

  @@map("attachments")
}

model Drawing {
  id              Int           @id @default(autoincrement())
  patientRecord   PatientRecord @relation(fields: [patientRecordId], references: [id], onDelete: Cascade)
  data            String?       @db.Text
  patientRecordId Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime?     @updatedAt

  @@map("drawings")
}

model Department {
  id        Int       @id @default(autoincrement())
  name      String
  users     User[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("departments")
}

model User {
  id                         Int             @id @default(autoincrement())
  username                   String?         @unique
  password                   String?
  email                      String?         @unique
  firstName                  String?
  lastName                   String?
  middleName                 String?
  status                     String?
  departmentId               Int
  department                 Department      @relation(fields: [departmentId], references: [id])
  createdAt                  DateTime        @default(now())
  updatedAt                  DateTime?       @updatedAt
  PatientRecord              PatientRecord[]
  autoRefractionByUsers      PatientRecord[] @relation(name: "autoRefractionByUser")
  visualAcuityByUsers        PatientRecord[] @relation(name: "visualAcuityByUser")
  refractionByUsers          PatientRecord[] @relation(name: "refractionByUser")
  intraOcularPressureByUsers PatientRecord[] @relation(name: "intraOcularPressureByUser")

  @@map("users")
}
